#
#  Doxygen
#

inherit: [copy]

# Invoke 'buildDoxygen $1', where $1 points to the source code folder (which contains the module's Doxyfile)
# Produces
#   out/          Doxygen result (i.e. out/html/ and so on)
#   Warnings      Warnings for manual inspection
#   out/Tagfile   Tagfile
buildScript: |
  buildDoxygen() {
    # Determine tagfiles
    tagfiles=""
    for i in "${!BOB_DEP_PATHS[@]}"; do
      case "$i" in
        *-doxy)
          tagfiles="$tagfiles ${BOB_DEP_PATHS[$i]}/Tagfile=TAGROOT::$i:"
          ;;
      esac
    done

    # Build configuration on-the-fly and run Doxygen
      ( sed -e '/^ *OUTPUT_FILE *=/d;/^ *WARN_LOGFILE *=/d;/^ *GENERATE_TAGFILE *=/d;/^ *TAGFILES *=/d;' <"$1"/Doxyfile
        echo "OUTPUT_DIRECTORY = $PWD/out"
        echo "WARN_LOGFILE = $PWD/Warnings"
        echo "GENERATE_TAGFILE = $PWD/out/Tagfile"
        echo "TAGFILES = $tagfiles" ) |
      ( cd "$1" && doxygen - )
  }

# Invoke 'packageDoxygen $1' to publish.
packageScript: |
  packageDoxygen() {
    shallowCopy "$1/out" .
  }

